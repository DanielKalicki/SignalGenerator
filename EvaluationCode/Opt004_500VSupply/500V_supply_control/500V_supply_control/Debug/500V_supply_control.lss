
500V_supply_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000032e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000032e  000003a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000b00  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070e  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f2  00000000  00000000  000012ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000055a  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00001a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015c  00000000  00000000  00001b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013c  00000000  00000000  00001c88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
  8a:	0c 94 95 01 	jmp	0x32a	; 0x32a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <read_i2c>:

#define DAC_ADDRESS  0xC0

int channel[4]={-1,-1,-1,-1};	//initialy all channels power down

unsigned char read_i2c(unsigned char address){
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
	unsigned char data=0;
	if (i2c_start(DAC_ADDRESS+I2C_WRITE))  {i2c_stop();	return 0;} 				// set device address and write mode
  96:	80 ec       	ldi	r24, 0xC0	; 192
  98:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_start>
  9c:	88 23       	and	r24, r24
  9e:	21 f0       	breq	.+8      	; 0xa8 <read_i2c+0x16>
  a0:	0e 94 4d 01 	call	0x29a	; 0x29a <i2c_stop>
  a4:	c0 e0       	ldi	r28, 0x00	; 0
  a6:	0b c0       	rjmp	.+22     	; 0xbe <read_i2c+0x2c>
	i2c_write(address);						// write address = i_address
  a8:	8c 2f       	mov	r24, r28
  aa:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_write>
	i2c_rep_start(DAC_ADDRESS+I2C_READ);				// set device address and read mode
  ae:	81 ec       	ldi	r24, 0xC1	; 193
  b0:	0e 94 4a 01 	call	0x294	; 0x294 <i2c_rep_start>
	data = i2c_readNak();								// read one byte form address 0
  b4:	0e 94 67 01 	call	0x2ce	; 0x2ce <i2c_readNak>
  b8:	c8 2f       	mov	r28, r24
	i2c_stop();
  ba:	0e 94 4d 01 	call	0x29a	; 0x29a <i2c_stop>
	return data;
}
  be:	8c 2f       	mov	r24, r28
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <initDAC>:
	//C2=1 C1=0 C0=0	This command writes Reference (VREF) selection bits of each channel.
	// 1 0 0 x | VrefA VrefB VrefC VrefD
	i2c_write(0x80);	//in this case all Vref=0 => it means that reference for every channel will be Vdd
	i2c_stop();
	*/
	i2c_start(DAC_ADDRESS+I2C_WRITE);
  c4:	80 ec       	ldi	r24, 0xC0	; 192
  c6:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_start>
	//C2=1 C1=0 C0=0	This command writes Reference (VREF) selection bits of each channel.
	// 1 0 0 x | VrefA VrefB VrefC VrefD
	//i2c_write(0x80);
	i2c_write(0xDF);	//in this case all Vref=0 => it means that reference for every channel will be Vdd
  ca:	8f ed       	ldi	r24, 0xDF	; 223
  cc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_write>
	i2c_stop();
  d0:	0e 94 4d 01 	call	0x29a	; 0x29a <i2c_stop>
	
	return 1;
}
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	08 95       	ret

000000d8 <writeToDAC>:
unsigned char writeToDAC(){
	
	if(i2c_start(DAC_ADDRESS+I2C_WRITE)) {i2c_stop();	return 0;}     // set device address and write mode
  d8:	80 ec       	ldi	r24, 0xC0	; 192
  da:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_start>
  de:	88 23       	and	r24, r24
  e0:	21 f0       	breq	.+8      	; 0xea <writeToDAC+0x12>
  e2:	0e 94 4d 01 	call	0x29a	; 0x29a <i2c_stop>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	08 95       	ret
			next byte:
				D7 D6 D5 D4 D3 D2 D1 D0
				
	*/
	//channel A
	if(channel[0]>=0){
  ea:	80 91 60 00 	lds	r24, 0x0060
  ee:	90 91 61 00 	lds	r25, 0x0061
  f2:	99 23       	and	r25, r25
  f4:	a4 f0       	brlt	.+40     	; 0x11e <writeToDAC+0x46>
		i2c_write(0x07&((uint8_t)(channel[0]/256)));		//Normal mode and data from channel[0]
  f6:	9c 01       	movw	r18, r24
  f8:	99 23       	and	r25, r25
  fa:	14 f4       	brge	.+4      	; 0x100 <writeToDAC+0x28>
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
 100:	83 2f       	mov	r24, r19
 102:	87 70       	andi	r24, 0x07	; 7
 104:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_write>
		i2c_write(channel[0]%256);
 108:	80 91 60 00 	lds	r24, 0x0060
 10c:	90 91 61 00 	lds	r25, 0x0061
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	71 e0       	ldi	r23, 0x01	; 1
 114:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__divmodhi4>
 118:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_write>
 11c:	06 c0       	rjmp	.+12     	; 0x12a <writeToDAC+0x52>
	}
	else {
		i2c_write(0x30);	//power down mode
 11e:	80 e3       	ldi	r24, 0x30	; 48
 120:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_write>
		i2c_write(0x00);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_write>
	}

	//channel B
	if(channel[1]>=0){
 12a:	80 91 62 00 	lds	r24, 0x0062
 12e:	90 91 63 00 	lds	r25, 0x0063
 132:	99 23       	and	r25, r25
 134:	a4 f0       	brlt	.+40     	; 0x15e <writeToDAC+0x86>
		i2c_write(0x07&((uint8_t)(channel[1]/256)));		//Normal mode
 136:	9c 01       	movw	r18, r24
 138:	99 23       	and	r25, r25
 13a:	14 f4       	brge	.+4      	; 0x140 <writeToDAC+0x68>
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	3f 4f       	sbci	r19, 0xFF	; 255
 140:	83 2f       	mov	r24, r19
 142:	87 70       	andi	r24, 0x07	; 7
 144:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_write>
		i2c_write(channel[1]%256);
 148:	80 91 62 00 	lds	r24, 0x0062
 14c:	90 91 63 00 	lds	r25, 0x0063
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	71 e0       	ldi	r23, 0x01	; 1
 154:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__divmodhi4>
 158:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_write>
 15c:	06 c0       	rjmp	.+12     	; 0x16a <writeToDAC+0x92>
	}
	else {
		i2c_write(0x30);	//power down mode
 15e:	80 e3       	ldi	r24, 0x30	; 48
 160:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_write>
		i2c_write(0x00);
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_write>
	}
	
	//channel C
	if(channel[2]>=0){
 16a:	80 91 64 00 	lds	r24, 0x0064
 16e:	90 91 65 00 	lds	r25, 0x0065
 172:	99 23       	and	r25, r25
 174:	a4 f0       	brlt	.+40     	; 0x19e <writeToDAC+0xc6>
		i2c_write(0x07&((uint8_t)(channel[2]/256)));		//Normal mode
 176:	9c 01       	movw	r18, r24
 178:	99 23       	and	r25, r25
 17a:	14 f4       	brge	.+4      	; 0x180 <writeToDAC+0xa8>
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	3f 4f       	sbci	r19, 0xFF	; 255
 180:	83 2f       	mov	r24, r19
 182:	87 70       	andi	r24, 0x07	; 7
 184:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_write>
		i2c_write(channel[2]%256);
 188:	80 91 64 00 	lds	r24, 0x0064
 18c:	90 91 65 00 	lds	r25, 0x0065
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	71 e0       	ldi	r23, 0x01	; 1
 194:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__divmodhi4>
 198:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_write>
 19c:	06 c0       	rjmp	.+12     	; 0x1aa <writeToDAC+0xd2>
	}
	else {
		i2c_write(0x30);	//power down mode
 19e:	80 e3       	ldi	r24, 0x30	; 48
 1a0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_write>
		i2c_write(0x00);
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_write>
	}
	
	//channel D
	if(channel[3]>=0){
 1aa:	80 91 66 00 	lds	r24, 0x0066
 1ae:	90 91 67 00 	lds	r25, 0x0067
 1b2:	99 23       	and	r25, r25
 1b4:	a4 f0       	brlt	.+40     	; 0x1de <writeToDAC+0x106>
		i2c_write(0x07&((uint8_t)(channel[3]/256)));		//Normal mode
 1b6:	9c 01       	movw	r18, r24
 1b8:	99 23       	and	r25, r25
 1ba:	14 f4       	brge	.+4      	; 0x1c0 <writeToDAC+0xe8>
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	3f 4f       	sbci	r19, 0xFF	; 255
 1c0:	83 2f       	mov	r24, r19
 1c2:	87 70       	andi	r24, 0x07	; 7
 1c4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_write>
		i2c_write(channel[3]%256);
 1c8:	80 91 66 00 	lds	r24, 0x0066
 1cc:	90 91 67 00 	lds	r25, 0x0067
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	71 e0       	ldi	r23, 0x01	; 1
 1d4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__divmodhi4>
 1d8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_write>
 1dc:	06 c0       	rjmp	.+12     	; 0x1ea <writeToDAC+0x112>
	}
	else {
		i2c_write(0x30);	//power down mode
 1de:	80 e3       	ldi	r24, 0x30	; 48
 1e0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_write>
		i2c_write(0x00);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_write>
	}
	i2c_stop();
 1ea:	0e 94 4d 01 	call	0x29a	; 0x29a <i2c_stop>

	return 1;				//success
 1ee:	81 e0       	ldi	r24, 0x01	; 1
}
 1f0:	08 95       	ret

000001f2 <main>:
int main(void)
{
	
	//initGPIO
	
	channel[0]=800;
 1f2:	80 e2       	ldi	r24, 0x20	; 32
 1f4:	93 e0       	ldi	r25, 0x03	; 3
 1f6:	90 93 61 00 	sts	0x0061, r25
 1fa:	80 93 60 00 	sts	0x0060, r24
	
	sei();
 1fe:	78 94       	sei
	i2c_init();
 200:	0e 94 0a 01 	call	0x214	; 0x214 <i2c_init>
	if(i2c_start(DAC_ADDRESS+I2C_WRITE)) {i2c_stop();}
 204:	80 ec       	ldi	r24, 0xC0	; 192
 206:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_start>
 20a:	88 23       	and	r24, r24
 20c:	11 f0       	breq	.+4      	; 0x212 <main+0x20>
 20e:	0e 94 4d 01 	call	0x29a	; 0x29a <i2c_stop>
 212:	ff cf       	rjmp	.-2      	; 0x212 <main+0x20>

00000214 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 214:	11 b8       	out	0x01, r1	; 1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 216:	8c e0       	ldi	r24, 0x0C	; 12
 218:	80 b9       	out	0x00, r24	; 0

}/* i2c_init */
 21a:	08 95       	ret

0000021c <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 21c:	94 ea       	ldi	r25, 0xA4	; 164
 21e:	96 bf       	out	0x36, r25	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 220:	06 b6       	in	r0, 0x36	; 54
 222:	07 fe       	sbrs	r0, 7
 224:	fd cf       	rjmp	.-6      	; 0x220 <i2c_start+0x4>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 226:	91 b1       	in	r25, 0x01	; 1
 228:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 22a:	98 30       	cpi	r25, 0x08	; 8
 22c:	11 f0       	breq	.+4      	; 0x232 <i2c_start+0x16>
 22e:	90 31       	cpi	r25, 0x10	; 16
 230:	79 f4       	brne	.+30     	; 0x250 <i2c_start+0x34>

	// send device address
	TWDR = address;
 232:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 234:	84 e8       	ldi	r24, 0x84	; 132
 236:	86 bf       	out	0x36, r24	; 54

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 238:	06 b6       	in	r0, 0x36	; 54
 23a:	07 fe       	sbrs	r0, 7
 23c:	fd cf       	rjmp	.-6      	; 0x238 <i2c_start+0x1c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 23e:	91 b1       	in	r25, 0x01	; 1
 240:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 242:	98 31       	cpi	r25, 0x18	; 24
 244:	39 f0       	breq	.+14     	; 0x254 <i2c_start+0x38>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 34       	cpi	r25, 0x40	; 64
 24a:	29 f4       	brne	.+10     	; 0x256 <i2c_start+0x3a>
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 254:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
 256:	08 95       	ret

00000258 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 258:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
 25a:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 25c:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 25e:	26 bf       	out	0x36, r18	; 54
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 260:	06 b6       	in	r0, 0x36	; 54
 262:	07 fe       	sbrs	r0, 7
 264:	fd cf       	rjmp	.-6      	; 0x260 <i2c_start_wait+0x8>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 266:	91 b1       	in	r25, 0x01	; 1
 268:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 26a:	98 30       	cpi	r25, 0x08	; 8
 26c:	11 f0       	breq	.+4      	; 0x272 <i2c_start_wait+0x1a>
 26e:	90 31       	cpi	r25, 0x10	; 16
 270:	b1 f7       	brne	.-20     	; 0x25e <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
 272:	83 b9       	out	0x03, r24	; 3
    	TWCR = (1<<TWINT) | (1<<TWEN);
 274:	36 bf       	out	0x36, r19	; 54
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 276:	06 b6       	in	r0, 0x36	; 54
 278:	07 fe       	sbrs	r0, 7
 27a:	fd cf       	rjmp	.-6      	; 0x276 <i2c_start_wait+0x1e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 27c:	91 b1       	in	r25, 0x01	; 1
 27e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 280:	90 32       	cpi	r25, 0x20	; 32
 282:	11 f0       	breq	.+4      	; 0x288 <i2c_start_wait+0x30>
 284:	98 35       	cpi	r25, 0x58	; 88
 286:	29 f4       	brne	.+10     	; 0x292 <i2c_start_wait+0x3a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 288:	46 bf       	out	0x36, r20	; 54
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 28a:	06 b6       	in	r0, 0x36	; 54
 28c:	04 fc       	sbrc	r0, 4
 28e:	fd cf       	rjmp	.-6      	; 0x28a <i2c_start_wait+0x32>
 290:	e6 cf       	rjmp	.-52     	; 0x25e <i2c_start_wait+0x6>
 292:	08 95       	ret

00000294 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 294:	0e 94 0e 01 	call	0x21c	; 0x21c <i2c_start>

}/* i2c_rep_start */
 298:	08 95       	ret

0000029a <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 29a:	84 e9       	ldi	r24, 0x94	; 148
 29c:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 29e:	06 b6       	in	r0, 0x36	; 54
 2a0:	04 fc       	sbrc	r0, 4
 2a2:	fd cf       	rjmp	.-6      	; 0x29e <i2c_stop+0x4>

}/* i2c_stop */
 2a4:	08 95       	ret

000002a6 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 2a6:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 2a8:	84 e8       	ldi	r24, 0x84	; 132
 2aa:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 2ac:	06 b6       	in	r0, 0x36	; 54
 2ae:	07 fe       	sbrs	r0, 7
 2b0:	fd cf       	rjmp	.-6      	; 0x2ac <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 2b2:	91 b1       	in	r25, 0x01	; 1
 2b4:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	98 32       	cpi	r25, 0x28	; 40
 2ba:	09 f4       	brne	.+2      	; 0x2be <i2c_write+0x18>
 2bc:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
 2be:	08 95       	ret

000002c0 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 2c0:	84 ec       	ldi	r24, 0xC4	; 196
 2c2:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));    
 2c4:	06 b6       	in	r0, 0x36	; 54
 2c6:	07 fe       	sbrs	r0, 7
 2c8:	fd cf       	rjmp	.-6      	; 0x2c4 <i2c_readAck+0x4>

    return TWDR;
 2ca:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readAck */
 2cc:	08 95       	ret

000002ce <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 2ce:	84 e8       	ldi	r24, 0x84	; 132
 2d0:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 2d2:	06 b6       	in	r0, 0x36	; 54
 2d4:	07 fe       	sbrs	r0, 7
 2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <i2c_readNak+0x4>
	
    return TWDR;
 2d8:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readNak */
 2da:	08 95       	ret

000002dc <__divmodhi4>:
 2dc:	97 fb       	bst	r25, 7
 2de:	09 2e       	mov	r0, r25
 2e0:	07 26       	eor	r0, r23
 2e2:	0a d0       	rcall	.+20     	; 0x2f8 <__divmodhi4_neg1>
 2e4:	77 fd       	sbrc	r23, 7
 2e6:	04 d0       	rcall	.+8      	; 0x2f0 <__divmodhi4_neg2>
 2e8:	0c d0       	rcall	.+24     	; 0x302 <__udivmodhi4>
 2ea:	06 d0       	rcall	.+12     	; 0x2f8 <__divmodhi4_neg1>
 2ec:	00 20       	and	r0, r0
 2ee:	1a f4       	brpl	.+6      	; 0x2f6 <__divmodhi4_exit>

000002f0 <__divmodhi4_neg2>:
 2f0:	70 95       	com	r23
 2f2:	61 95       	neg	r22
 2f4:	7f 4f       	sbci	r23, 0xFF	; 255

000002f6 <__divmodhi4_exit>:
 2f6:	08 95       	ret

000002f8 <__divmodhi4_neg1>:
 2f8:	f6 f7       	brtc	.-4      	; 0x2f6 <__divmodhi4_exit>
 2fa:	90 95       	com	r25
 2fc:	81 95       	neg	r24
 2fe:	9f 4f       	sbci	r25, 0xFF	; 255
 300:	08 95       	ret

00000302 <__udivmodhi4>:
 302:	aa 1b       	sub	r26, r26
 304:	bb 1b       	sub	r27, r27
 306:	51 e1       	ldi	r21, 0x11	; 17
 308:	07 c0       	rjmp	.+14     	; 0x318 <__udivmodhi4_ep>

0000030a <__udivmodhi4_loop>:
 30a:	aa 1f       	adc	r26, r26
 30c:	bb 1f       	adc	r27, r27
 30e:	a6 17       	cp	r26, r22
 310:	b7 07       	cpc	r27, r23
 312:	10 f0       	brcs	.+4      	; 0x318 <__udivmodhi4_ep>
 314:	a6 1b       	sub	r26, r22
 316:	b7 0b       	sbc	r27, r23

00000318 <__udivmodhi4_ep>:
 318:	88 1f       	adc	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	5a 95       	dec	r21
 31e:	a9 f7       	brne	.-22     	; 0x30a <__udivmodhi4_loop>
 320:	80 95       	com	r24
 322:	90 95       	com	r25
 324:	bc 01       	movw	r22, r24
 326:	cd 01       	movw	r24, r26
 328:	08 95       	ret

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
